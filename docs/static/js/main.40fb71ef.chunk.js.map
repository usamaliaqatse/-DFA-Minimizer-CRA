{"version":3,"sources":["includes/Header.js","includes/Alert.js","utils/Minimizer.js","utils/Helpers.js","pages/ResultModal.js","pages/Home.js","App.js","index.js"],"names":["Header","Jumbotron","className","style","backgroundColor","paddingBottom","borderRadius","Container","Alert","type","msg","minimize","originalAutomaton","console","log","util","inspect","showHidden","depth","equivalences","equivalenceCount","applyEquivalenceTheorem","automaton","previousEquivalence","currentEquivalence","nonFinalStates","states","filter","state","acceptingStates","includes","push","i","length","set","isPair","paired","j","pair","pivotState","k","subsequentState","alphabet","forEach","symbol","pivotStateTransition","transitions","transition","fromState","toStates","isEqual","value","other","Object","prototype","toString","call","indexOf","valueLen","keys","compare","item1","item2","itemType","key","hasOwnProperty","sortedEquivalences","equivalence","sort","a","b","index","minimizedAutomaton","initialState","separatedStates","join","map","stateElement","replace","split","oldToState","ResultModal","setIsSubmitted","useState","modal","setModal","automatonGraph","setAutomatonGraph","setMinimizedAutomaton","minimizedAutomatonGraph","setMinimizedAutomatonGraph","setEquivalences","drawGraph","dotString","window","noam","fsm","printDotFormat","Viz","useEffect","minimizedAutomatonResult","generateAutomaton","toggle","Modal","isOpen","size","width","maxWidth","margin","ModalHeader","ModalBody","Row","Col","md","Table","responsive","bordered","scope","dangerouslySetInnerHTML","__html","sm","JSON","stringify","formatEquivalence","ModalFooter","Button","color","onClick","Home","setAutomaton","selectedFinalStates","setSelectedFinalStates","setAcceptingStates","stateOptions","setStateOptions","isSubmitted","hasErrors","setHasErrors","selectedState","handleChange","e","target","name","options","label","splitName","alreadyExists","Fragment","Card","CardHeader","CardBody","CardTitle","Form","onSubmit","preventDefault","scrollTo","setTimeout","validate","FormGroup","Label","for","Input","onChange","id","required","placeholder","FormText","option","labelledBy","bsSize","CardFooter","App","position","bottom","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wPA6BeA,EA1BA,WACb,OACE,gCACE,kBAACC,EAAA,EAAD,CACEC,UAAU,aACVC,MAAO,CACLC,gBAAiB,UACjBC,cAAe,QACfC,aAAc,QAGhB,kBAACC,EAAA,EAAD,KACE,wBAAIL,UAAU,yBAAd,iBACA,wBAAIA,UAAU,aACd,uBAAGA,UAAU,oBAAb,wN,cCPKM,EARD,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,IACrB,OACE,yBAAKR,UAAS,sBAAiBO,IAC7B,uBAAGP,UAAU,uBADf,IAC0CQ,I,yFCDjCC,EAAW,SAACC,GACvBC,QAAQC,IAAI,oDAEZD,QAAQC,IACN,gBACAC,IAAKC,QAAQJ,EAAmB,CAAEK,YAAY,EAAOC,MAAO,QAG9DL,QAAQC,IAAI,wDAEZ,IAAIK,EAAe,GACfC,EAAmB,GAQvB,SAASC,EAAwBC,EAAWC,GAC1CV,QAAQC,IAAR,8BACyBM,EADzB,yCAGA,IAAII,EAAqB,GAEzB,GAAyB,IAArBJ,EAAwB,CAE1B,IAAIK,EAAiBH,EAAUI,OAAOC,QAAO,SAACC,GAC5C,OAAQN,EAAUO,gBAAgBC,SAASF,MAG7CJ,EAAqB,CAACC,EAAgBH,EAAUO,iBAEhDV,EAAaY,KAAKP,GAClBX,QAAQC,IAAIU,OACP,CAGL,IAAK,IAAIQ,EAAI,EAAGA,EAAIT,EAAoBU,OAAQD,IAAK,CACnD,IAAIE,EAAMX,EAAoBS,GAC1BG,GAAS,EACTC,EAAS,GAEb,GAAIF,EAAID,OAAS,EAEf,IAFmB,IAAD,WAETI,GACHC,EAAO,GACX,IAAMC,EAAaL,EAAIG,GAClBD,EAAON,SAASS,KACnBD,EAAKP,KAAKQ,GACVH,EAAOL,KAAKQ,IAEd,IATgB,eASPC,GACP,IAAMC,EAAkBP,EAAIM,GAG5BlB,EAAUoB,SAASC,SAAQ,SAACC,GAC1B,IAAIC,EAAuBvB,EAAUwB,YAAYnB,QAC/C,SAACoB,GACC,OACEA,EAAWC,YAAcT,GACzBQ,EAAWH,SAAWA,KAG1B,GAGEG,EAAazB,EAAUwB,YAAYnB,QAAO,SAACoB,GAC7C,OACEA,EAAWC,YAAcP,GACzBM,EAAWH,SAAWA,KAEvB,GAGH,GACEC,EAAqBI,SAAS,KAAOF,EAAWE,SAAS,GAEzDd,GAAS,OAET,IAAK,IAAIH,EAAI,EAAGA,EAAIT,EAAoBU,OAAQD,IAAK,CACnD,IAAME,EAAMX,EAAoBS,GAChC,GACEE,EAAIJ,SAASe,EAAqBI,SAAS,KAC3Cf,EAAIJ,SAASiB,EAAWE,SAAS,IACjC,CACAd,GAAS,EACT,MAEAA,GAAS,MAMbA,EACFtB,QAAQC,IAAR,mBACcyB,EADd,gBACgCE,EADhC,kBAIA5B,QAAQC,IAAR,mBACcyB,EADd,gBACgCE,EADhC,sBAGEN,IAAWC,EAAON,SAASW,KAC7BL,EAAOL,KAAKU,GACZH,EAAKP,KAAKU,IAGZN,GAAS,GAxDFK,EAAIH,EAAI,EAAGG,EAAIN,EAAID,OAAQO,IAAM,EAAjCA,GA0DLF,EAAKL,QACPT,EAAmBO,KAAKO,IAlEnBD,EAAI,EAAGA,EAAIH,EAAID,OAAQI,IAAK,CAAC,IAChCC,EAD+B,EAA5BD,QAuETb,EAAmBO,KAAKG,GAI5Bf,EAAaY,KAAKP,GAClBX,QAAQC,IAAIU,IC7HK,SAAV0B,EAAoBC,EAAOC,GAEtC,IAAI3C,EAAO4C,OAAOC,UAAUC,SAASC,KAAKL,GAG1C,GAAI1C,IAAS4C,OAAOC,UAAUC,SAASC,KAAKJ,GAAQ,OAAO,EAG3D,GAAI,CAAC,iBAAkB,mBAAmBK,QAAQhD,GAAQ,EAAG,OAAO,EAGpE,IAAIiD,EACO,mBAATjD,EAA4B0C,EAAMlB,OAASoB,OAAOM,KAAKR,GAAOlB,OAGhE,GAAIyB,KADO,mBAATjD,EAA4B2C,EAAMnB,OAASoB,OAAOM,KAAKP,GAAOnB,QACrC,OAAO,EAGlC,IAAI2B,EAAU,SAAUC,EAAOC,GAE7B,IAAIC,EAAWV,OAAOC,UAAUC,SAASC,KAAKK,GAG9C,GAAI,CAAC,iBAAkB,mBAAmBJ,QAAQM,IAAa,GAC7D,IAAKb,EAAQW,EAAOC,GAAQ,OAAO,MAIhC,CAEH,GAAIC,IAAaV,OAAOC,UAAUC,SAASC,KAAKM,GAAQ,OAAO,EAI/D,GAAiB,sBAAbC,GACF,GAAIF,EAAMN,aAAeO,EAAMP,WAAY,OAAO,OAElD,GAAIM,IAAUC,EAAO,OAAO,IAMlC,GAAa,mBAATrD,GACF,IAAK,IAAIuB,EAAI,EAAGA,EAAI0B,EAAU1B,IAC5B,IAAoC,IAAhC4B,EAAQT,EAAMnB,GAAIoB,EAAMpB,IAAe,OAAO,OAGpD,IAAK,IAAIgC,KAAOb,EACd,GAAIA,EAAMc,eAAeD,KACiB,IAApCJ,EAAQT,EAAMa,GAAMZ,EAAMY,IAAiB,OAAO,EAM5D,OAAO,GDwEDd,CAAQ3B,EAAqBC,KAIjCJ,GAAoB,EAEpBC,EAAwBC,EAAWE,IAGrCH,CAAwBT,GAExB,IAAIsD,EAAqB,GACzB/C,EAAawB,SAAQ,SAACwB,GACpBD,EAAmBnC,KACjBoC,EAAYC,MAAK,SAACC,EAAGC,GACnB,OAAOA,EAAErC,OAASoC,EAAEpC,cAK1BpB,QAAQC,IAAI,iEAEZoD,EAAmBvB,SAAQ,SAACwB,EAAaI,GACvC1D,QAAQC,IAAR,UAAeyD,EAAf,iBAAqCJ,MAGvC,IAAIK,EAAqB,CACvB9C,OAAQ,GACRgB,SAAU9B,EAAkB8B,SAC5B+B,aAAc,KACd5C,gBAAiB,GACjBiB,YAAa,IAGX4B,EAAkB,GAsDtB,OApDAR,EAAmBA,EAAmBjC,OAAS,GAAGU,SAAQ,SAACT,GACzDsC,EAAmB9C,OAAOK,KAAKG,EAAIyC,KAAK,KACxCD,EAAgB3C,KAAKG,EAAIyC,KAAK,SAGhCH,EAAmBC,aAAeP,EAChCA,EAAmBjC,OAAS,GAE3BN,QAAO,SAACO,GACP,OAAOA,EAAIJ,SAASlB,EAAkB6D,iBACrC,GACFE,KAAK,IAERH,EAAmB3C,gBAAkBqC,EACnCA,EAAmBjC,OAAS,GAC5BN,QAAO,SAACO,GACR,OAAOA,EAAIJ,SAAJ,MAAAI,EAAG,YAAatB,EAAkBiB,qBAG3C2C,EAAmB3C,gBAAkB2C,EAAmB3C,gBAAgB+C,KACtE,SAAChD,GACC,OAAOA,EAAM+C,KAAK,OAItBD,EAAgB/B,SAAQ,SAACf,GACvB,IACIiD,EADgBjD,EAAMkD,QAAQ,mBAAoB,IAAIC,MAAM,KAC/B,GACfnE,EAAkBkC,YAAYnB,QAAO,SAACoB,GACtD,OAAOA,EAAWC,YAAc6B,KAEtBlC,SAAQ,SAACI,GACnB,IAAIiC,EAAajC,EAAWE,SAAS,GACjCA,EAAWyB,EAAgB/C,QAAO,SAACC,GAErC,OADaA,EAAMkD,QAAQ,mBAAoB,IAAIC,MAAM,KAC3CjD,SAASkD,MAEzB/B,EAAS,GAAKA,EAAS,GAAG6B,QAAQ,KAAM,IACxCN,EAAmB1B,YAAYf,KAAK,CAClCiB,UAAWpB,EAAMkD,QAAQ,KAAM,IAC/B7B,WACAL,OAAQG,EAAWH,YAGvB/B,QAAQC,IAAI+D,MAGdhE,QAAQC,IACN,iBACAC,IAAKC,QAAQwD,EAAoB,CAAEvD,YAAY,EAAOC,MAAO,QAGxD,CAAEsD,qBAAoBrD,aAAc+C,IEjD9Be,EAzJK,SAAC,GAAmC,IAAjC3D,EAAgC,EAAhCA,UAAW4D,EAAqB,EAArBA,eAAqB,EAC3BC,oBAAS,GADkB,mBAC9CC,EAD8C,KACvCC,EADuC,OAETF,mBAAS,IAFA,mBAE9CG,EAF8C,KAE9BC,EAF8B,OAGDJ,mBAAS,MAHR,mBAG9CX,EAH8C,KAG1BgB,EAH0B,OAISL,mBAAS,IAJlB,mBAI9CM,EAJ8C,KAIrBC,EAJqB,OAKbP,mBAAS,MALI,mBAK9ChE,EAL8C,KAKhCwE,EALgC,KAO/CC,EAAY,SAACtE,GACjB,IAAIuE,EAAYC,OAAOC,KAAKC,IAAIC,eAAe3E,GAE/C,OADcwE,OAAOI,IAAIL,EAAW,QActCM,qBAAU,YAVgB,SAAC7E,GACzBiE,EAAkBK,EAAUtE,IAC5B,IAAI8E,EAA2BzF,EAASW,GACxCkE,EAAsBY,EAAyB5B,oBAC/CkB,EACEE,EAAUQ,EAAyB5B,qBAErCmB,EAAgBS,EAAyBjF,cAIzCkF,CAAkB/E,KAEjB,IAEH,IAAMgF,EAAS,WACbjB,GAAUD,GACVF,GAAe,IAUjB,OACE,kBAACqB,EAAA,EAAD,CACEC,OAAQpB,EACRkB,OAAQA,EACRG,KAAK,KACLtG,MAAO,CAAEuG,MAAO,OAAQC,SAAU,OAAQC,OAAQ,SAElD,kBAACC,EAAA,EAAD,CAAaP,OAAQA,GAArB,oBACA,kBAACQ,EAAA,EAAD,KACE,6BACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAG,KACN,+DACA,kBAACC,EAAA,EAAD,CAAOC,YAAU,EAACC,UAAQ,GACxB,+BACE,4BACE,sCACC9F,EAAUoB,SAASkC,KAAI,SAAChC,GAAD,OACtB,wBAAIoB,IAAKpB,GAASA,QAIxB,+BACGtB,EAAUI,OAAOkD,KAAI,SAAChD,GACrB,OACE,wBAAIoC,IAAG,qBAAgBpC,EAAhB,MACL,wBAAIyF,MAAM,OAAOzF,GAChBN,EAAUoB,SAASkC,KAAI,SAAChC,GAAD,OACtB,wBAAIoB,IAAG,UAAKpC,EAAL,YAAcgB,IAClBtB,EAAUwB,YAAY8B,KAAI,SAAC7B,GAC1B,GACEA,EAAWH,SAAWA,GACtBG,EAAWC,YAAcpB,EAEzB,OAAOmB,EAAWE,SAAS,gBAU7C,wDACA,yBACE/C,UAAU,mBACVoH,wBAAyB,CAAEC,OAAQjC,MAIvC,kBAAC0B,EAAA,EAAD,CAAKQ,GAAG,KACN,gEACChD,GACC,kBAAC0C,EAAA,EAAD,CAAOC,YAAU,EAACC,UAAQ,GACxB,+BACE,4BACE,sCACC5C,EAAmB9B,SAASkC,KAAI,SAAChC,GAAD,OAC/B,wBAAIoB,IAAKpB,GAASA,QAIxB,+BACG4B,EAAmB9C,OAAOkD,KAAI,SAAChD,GAC9B,OACE,wBAAIoC,IAAG,qBAAgBpC,EAAhB,MACL,wBAAIyF,MAAM,OAAOzF,GAChB4C,EAAmB9B,SAASkC,KAAI,SAAChC,GAAD,OAC/B,wBAAIoB,IAAG,UAAKpC,EAAL,YAAcgB,IAClB4B,EAAmB1B,YAAY8B,KAC9B,SAAC7B,GACC,GACEA,EAAWH,SAAWA,GACtBG,EAAWC,YAAcpB,EAEzB,OAAOmB,EAAWE,SAAS,gBAYjD,qDACC9B,GACCA,EAAayD,KAAI,SAACT,EAAaI,GAAd,OACf,qCACMA,EADN,yBAlGU,SAACJ,GACzB,OAAOsD,KAAKC,UAAUvD,GACnBW,QAAQ,MAAO,KACfA,QAAQ,MAAO,KACfA,QAAQ,KAAM,MA+FyB6C,CAAkBxD,QAGlD,yDACA,yBACEjE,UAAU,mBACVoH,wBAAyB,CAAEC,OAAQ9B,SAM7C,kBAACmC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,MAAM,SAASC,QAASzB,GAAhC,Y,wFCuHO0B,EAnQF,WAAO,IAAD,EACiB7C,mBAAS,CACzCzD,OAAQ,GACRgB,SAAU,GACV+B,aAAc,KACd5C,gBAAiB,GACjBiB,YAAa,KANE,mBACVxB,EADU,KACC2G,EADD,OASqC9C,mBAAS,IAT9C,mBASV+C,EATU,KASWC,EATX,KAWjBhC,qBAAU,WACRiC,MAEC,CAACF,IAda,MAgBuB/C,mBAAS,IAhBhC,mBAgBVkD,EAhBU,KAgBIC,EAhBJ,OAiBqBnD,oBAAS,GAjB9B,mBAiBVoD,EAjBU,KAiBGrD,EAjBH,OAkBiBC,oBAAS,GAlB1B,mBAkBVqD,EAlBU,KAkBCC,EAlBD,KAoBXL,EAAqB,WACzB,IAAIvG,EAAkB,GACtBqG,EAAoBvF,SAAQ,SAAC+F,GAC3B7G,EAAgBE,KAAK2G,EAAcvF,UAErC8E,EAAa,2BAAK3G,GAAN,IAAiBO,sBAsCzB8G,EAAe,SAACC,GACpB,IAAIzF,EACJ,GAAsB,WAAlByF,EAAEC,OAAOC,KAAmB,CAE9B,GAAc,MADd3F,EAAQyF,EAAEC,OAAO1F,MAAM2B,QAAQ,mBAAoB,KAGjD,YADAwD,EAAgB,IAGlB,IAAI5G,EAASyB,EAAM4B,MAAM,KACzBkD,EAAa,2BACR3G,GADO,IAEVI,SACA+C,aAAc,KACd5C,gBAAiB,MAEnB,IAAIkH,EAAU,GACdrH,EAAOiB,SAAQ,SAACf,GACdmH,EAAQhH,KAAK,CACXiH,MAAOpH,EACPuB,MAAOvB,OAGXuG,EAAuB,IACvBG,EAAgBS,QACX,GAAsB,kBAAlBH,EAAEC,OAAOC,KAClB3F,EAAQyF,EAAEC,OAAO1F,MACjB8E,EAAa,2BAAK3G,GAAN,IAAiBmD,aAActB,UACtC,GAAsB,WAAlByF,EAAEC,OAAOC,KAAmB,CAErC,IAAIpG,GADJS,EAAQyF,EAAEC,OAAO1F,MAAM2B,QAAQ,mBAAoB,KAC9BC,MAAM,KAC3BkD,EAAa,2BAAK3G,GAAN,IAAiBoB,kBACxB,CACL,IAAIuG,EAAYL,EAAEC,OAAOC,KAAK/D,MAAM,KAChC/B,EAAYiG,EAAU,GACtBhG,EAAW,CAAC2F,EAAEC,OAAO1F,OACrBP,EAASqG,EAAUA,EAAUhH,OAAS,GACtCa,EAAcxB,EAAUwB,YACxBoG,GAAgB,EACpBpG,EAAYH,SAAQ,SAACI,GACnB,GACEA,EAAWH,SAAWA,GACtBG,EAAWC,YAAcA,EAIzB,OAFAD,EAAWE,SAAWA,OACtBiG,GAAgB,OAIE,IAAlBA,GACFpG,EAAYf,KAAK,CAAEiB,YAAWC,WAAUL,WAE1CqF,EAAa,2BAAK3G,GAAN,IAAiBwB,mBAIjC,OACE,kBAAC,IAAMqG,SAAP,KACE,kBAACC,EAAA,EAAD,CAAMlJ,UAAU,aACd,kBAACmJ,EAAA,EAAD,wBACA,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,4DAGCf,GACC,kBAAC,EAAD,CACE/H,KAAK,SACLC,IAAI,0HAGR,kBAAC8I,EAAA,EAAD,CAAMC,SA9EO,SAACb,GACpBA,EAAEc,iBACFtB,IA5Be,WAAO,IAEpB1G,EAKEJ,EALFI,OACAgB,EAIEpB,EAJFoB,SACA+B,EAGEnD,EAHFmD,aACA5C,EAEEP,EAFFO,gBACAiB,EACExB,EADFwB,YAEF,QACEpB,EAAOO,OAAS,GAChBS,EAAST,OAAS,GACF,MAAhBwC,GACA5C,EAAgBI,OAAS,GACzBa,EAAYb,OAAS,KAErBwG,GAAa,GACb3C,OAAO6D,SAAS,EAAG,GACnBC,YAAW,WACTnB,GAAa,KACZ,MACI,GASLoB,KACFpB,GAAa,GACbvD,GAAe,MA0ET,kBAAC4E,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,IAAI,UAAX,qCACA,kBAACC,EAAA,EAAD,CACEC,SAAUvB,EACVlI,KAAK,OACLqI,KAAK,SACLqB,GAAG,SACHC,UAAQ,EACRC,YAAY,yCAEd,kBAACC,EAAA,EAAD,wDAIF,kBAACR,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,IAAI,UAAX,8CAGA,kBAACC,EAAA,EAAD,CACEC,SAAUvB,EACVlI,KAAK,OACLqI,KAAK,SACLsB,UAAQ,EACRD,GAAG,SACHE,YAAY,oBAEd,kBAACC,EAAA,EAAD,wDAIDjC,EAAapG,OAAS,GACrB,kBAAC6H,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,IAAI,iBAAX,yBACA,kBAACC,EAAA,EAAD,CACEG,UAAQ,EACR3J,KAAK,SACLqI,KAAK,gBACLqB,GAAG,gBACHD,SAAUvB,EACVxF,MAAO7B,EAAUmD,aAAenD,EAAUmD,aAAe,IAEzD,4BAAQtB,MAAM,IAAd,aACCkF,EAAazD,KAAI,SAAC2F,GAAD,OAChB,4BAAQvG,IAAKuG,EAAOpH,MAAOA,MAAOoH,EAAOpH,OACtCoH,EAAOpH,YAMjBkF,EAAapG,OAAS,GACrB,kBAAC6H,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,IAAI,gBAAX,wBACA,kBAAC,IAAD,CACEI,UAAQ,EACRD,GAAG,eACHpB,QAASV,EACTlF,MAAO+E,EACPgC,SAAU/B,EACVqC,WAAY,YAIjBlJ,EAAUI,OAAOO,OAAS,GAAKX,EAAUoB,SAAST,OAAS,GAC1D,kBAAC6H,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,oBACA,kBAAC7C,EAAA,EAAD,CAAOC,YAAU,EAACC,UAAQ,GACxB,+BACE,4BACE,sCACC9F,EAAUoB,SAASkC,KAAI,SAAChC,GAAD,OACtB,wBAAIoB,IAAKpB,GAASA,QAIxB,+BACGtB,EAAUI,OAAOkD,KAAI,SAAChD,GACrB,OACE,wBAAIoC,IAAG,qBAAgBpC,EAAhB,MACL,wBAAIyF,MAAM,OAAOzF,GAChBN,EAAUoB,SAASkC,KAAI,SAAClC,GAAD,OACtB,wBAAIsB,IAAG,UAAKpC,EAAL,YAAcc,IACnB,kBAACuH,EAAA,EAAD,CACEG,UAAQ,EACRK,OAAO,KACPhK,KAAK,SACLyJ,SAAUvB,EACVG,KAAI,UAAKlH,EAAL,YAAcc,IAElB,4BAAQS,MAAM,IAAd,SACCkF,EAAazD,KAAI,SAAC2F,GAAD,OAChB,4BACEvG,IAAKuG,EAAOpH,MACZA,MAAOoH,EAAOpH,OAEboH,EAAOpH,sBAahC,kBAAC0E,EAAA,EAAD,CAAQpH,KAAK,SAASN,MAAO,CAAEC,gBAAiB,YAAhD,kBAKJ,kBAACsK,EAAA,EAAD,CAAYxK,UAAU,yFACpB,oEAKHqI,GACC,kBAAC,EAAD,CAAajH,UAAWA,EAAW4D,eAAgBA,MChQ5CyF,MAXf,WACE,OACE,oCACE,kBAAC,EAAD,MACA,kBAACpK,EAAA,EAAD,CAAWJ,MAAO,CAAEyK,SAAU,WAAYC,OAAQ,UAChD,kBAAC,EAAD,SCJRC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.40fb71ef.chunk.js","sourcesContent":["import React from 'react';\nimport { Jumbotron, Container } from 'reactstrap';\n\nconst Header = () => {\n  return (\n    <header>\n      <Jumbotron\n        className='text-white'\n        style={{\n          backgroundColor: '#4052B6',\n          paddingBottom: '150px',\n          borderRadius: '0px',\n        }}\n      >\n        <Container>\n          <h1 className='display-3 text-center'>DFA Minimizer</h1>\n          <hr className='bg-white' />\n          <p className='lead text-center'>\n            Minimize a DFA using Equivalence Theorem. You just need to input the\n            state transition table for the original DFA that you want to\n            minimize and our algorithm with compute and visualize everything\n            else for you.\n          </p>\n        </Container>\n      </Jumbotron>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from 'react';\n\nconst Alert = ({ type, msg }) => {\n  return (\n    <div className={`alert alert-${type}`}>\n      <i className='fas fa-info-circle'></i> {msg}\n    </div>\n  );\n};\n\nexport default Alert;\n","/* eslint-disable no-loop-func */\nimport util from 'util';\nimport { isEqual } from './Helpers';\n\nexport const minimize = (originalAutomaton) => {\n  console.log('----------------- Original DFA -----------------');\n\n  console.log(\n    'Original DFA:',\n    util.inspect(originalAutomaton, { showHidden: false, depth: null })\n  );\n\n  console.log('----------------- DFA Minimization -----------------');\n\n  var equivalences = []; // Keeping track of all equivalences\n  var equivalenceCount = 0; // Keeping track of the equivalence count\n\n  /**\n   * Apply equivalence theorem on given DFA\n   * @param  {Object} automaton The original DFA\n   * @param  {Array} previousEquivalence The previous equivalence\n   */\n\n  function applyEquivalenceTheorem(automaton, previousEquivalence) {\n    console.log(\n      `******************* ${equivalenceCount}-Equivalence ***********************`\n    );\n    let currentEquivalence = [];\n    // For 0-Equivalence just separate the non-final and final states\n    if (equivalenceCount === 0) {\n      // Filtering out nonFinalStates\n      let nonFinalStates = automaton.states.filter((state) => {\n        return !automaton.acceptingStates.includes(state);\n      });\n      // Creating the currentEquivalence array with non-final and final states\n      currentEquivalence = [nonFinalStates, automaton.acceptingStates];\n      // Adding the 0-equivalence to the equivalences set\n      equivalences.push(currentEquivalence);\n      console.log(currentEquivalence);\n    } else {\n      // For equivalences where k > 0, create new pairs of equivalent states\n      // Looping over the k-1 equivalence to produce the newer equivalence\n      for (let i = 0; i < previousEquivalence.length; i++) {\n        let set = previousEquivalence[i]; // Set in the k-1 equivalence\n        let isPair = false;\n        let paired = [];\n        // If the set has more than one states then start checking those states for equivalence\n        if (set.length > 1) {\n          // Looping over each state in the set\n          for (let j = 0; j < set.length; j++) {\n            var pair = [];\n            const pivotState = set[j];\n            if (!paired.includes(pivotState)) {\n              pair.push(pivotState);\n              paired.push(pivotState);\n            }\n            for (let k = j + 1; k < set.length; k++) {\n              const subsequentState = set[k];\n\n              // Get the transitions for the pivot state\n              automaton.alphabet.forEach((symbol) => {\n                let pivotStateTransition = automaton.transitions.filter(\n                  (transition) => {\n                    return (\n                      transition.fromState === pivotState &&\n                      transition.symbol === symbol\n                    );\n                  }\n                )[0];\n\n                // Get the transitions for the subsequent state\n                let transition = automaton.transitions.filter((transition) => {\n                  return (\n                    transition.fromState === subsequentState &&\n                    transition.symbol === symbol\n                  );\n                })[0];\n\n                // Compare the two states for their equivalence\n                if (\n                  pivotStateTransition.toStates[0] === transition.toStates[0]\n                ) {\n                  isPair = true;\n                } else {\n                  for (let i = 0; i < previousEquivalence.length; i++) {\n                    const set = previousEquivalence[i];\n                    if (\n                      set.includes(pivotStateTransition.toStates[0]) &&\n                      set.includes(transition.toStates[0])\n                    ) {\n                      isPair = true;\n                      break;\n                    } else {\n                      isPair = false;\n                    }\n                  }\n                }\n              });\n\n              if (isPair)\n                console.log(\n                  `Matching ${pivotState} and ${subsequentState} (Equivalent)`\n                );\n              else\n                console.log(\n                  `Matching ${pivotState} and ${subsequentState} (Non Equivalent)`\n                );\n              if (isPair && !paired.includes(subsequentState)) {\n                paired.push(subsequentState);\n                pair.push(subsequentState);\n              }\n\n              isPair = false;\n            }\n            if (pair.length) {\n              currentEquivalence.push(pair);\n            }\n          }\n        } else {\n          // Else if the set just contains a single state then push it to the currentEquivalence without performing any operations on it whatsoever\n          currentEquivalence.push(set);\n        }\n      }\n      // Once the currentEquivalence has been computed, push it to the main equivalence array\n      equivalences.push(currentEquivalence);\n      console.log(currentEquivalence);\n    }\n    // Stop the recursive function if the previous and the current equivalences are the same\n    if (isEqual(previousEquivalence, currentEquivalence)) {\n      return;\n    }\n    // Incrementing equivalence count 'k' with 1\n    equivalenceCount += 1;\n    // Recursive call to the function\n    applyEquivalenceTheorem(automaton, currentEquivalence);\n  }\n\n  applyEquivalenceTheorem(originalAutomaton);\n\n  var sortedEquivalences = [];\n  equivalences.forEach((equivalence) => {\n    sortedEquivalences.push(\n      equivalence.sort((a, b) => {\n        return b.length - a.length;\n      })\n    );\n  });\n\n  console.log('\\n\\n----------------- Computed Equivalences -----------------');\n\n  sortedEquivalences.forEach((equivalence, index) => {\n    console.log(`${index}-Equivalence:`, equivalence);\n  });\n\n  let minimizedAutomaton = {\n    states: [],\n    alphabet: originalAutomaton.alphabet,\n    initialState: null,\n    acceptingStates: [],\n    transitions: [],\n  };\n\n  let separatedStates = [];\n\n  sortedEquivalences[sortedEquivalences.length - 1].forEach((set) => {\n    minimizedAutomaton.states.push(set.join(''));\n    separatedStates.push(set.join(','));\n  });\n\n  minimizedAutomaton.initialState = sortedEquivalences[\n    sortedEquivalences.length - 1\n  ]\n    .filter((set) => {\n      return set.includes(originalAutomaton.initialState);\n    })[0]\n    .join('');\n\n  minimizedAutomaton.acceptingStates = sortedEquivalences[\n    sortedEquivalences.length - 1\n  ].filter((set) => {\n    return set.includes(...originalAutomaton.acceptingStates);\n  });\n\n  minimizedAutomaton.acceptingStates = minimizedAutomaton.acceptingStates.map(\n    (state) => {\n      return state.join('');\n    }\n  );\n\n  separatedStates.forEach((state) => {\n    let stateElements = state.replace(/(^\\s*,)|(,\\s*$)/g, '').split(',');\n    let stateElement = stateElements[0];\n    let transitions = originalAutomaton.transitions.filter((transition) => {\n      return transition.fromState === stateElement;\n    });\n    transitions.forEach((transition) => {\n      let oldToState = transition.toStates[0];\n      let toStates = separatedStates.filter((state) => {\n        let states = state.replace(/(^\\s*,)|(,\\s*$)/g, '').split(',');\n        return states.includes(oldToState);\n      });\n      toStates[0] = toStates[0].replace(/,/g, '');\n      minimizedAutomaton.transitions.push({\n        fromState: state.replace(/,/g, ''),\n        toStates,\n        symbol: transition.symbol,\n      });\n    });\n    console.log(stateElement);\n  });\n\n  console.log(\n    'Minimized DFA:',\n    util.inspect(minimizedAutomaton, { showHidden: false, depth: null })\n  );\n\n  return { minimizedAutomaton, equivalences: sortedEquivalences };\n};\n","export const isEqual = function (value, other) {\n  // Get the value type\n  var type = Object.prototype.toString.call(value);\n\n  // If the two objects are not the same type, return false\n  if (type !== Object.prototype.toString.call(other)) return false;\n\n  // If items are not an object or array, return false\n  if (['[object Array]', '[object Object]'].indexOf(type) < 0) return false;\n\n  // Compare the length of the length of the two items\n  var valueLen =\n    type === '[object Array]' ? value.length : Object.keys(value).length;\n  var otherLen =\n    type === '[object Array]' ? other.length : Object.keys(other).length;\n  if (valueLen !== otherLen) return false;\n\n  // Compare two items\n  var compare = function (item1, item2) {\n    // Get the object type\n    var itemType = Object.prototype.toString.call(item1);\n\n    // If an object or array, compare recursively\n    if (['[object Array]', '[object Object]'].indexOf(itemType) >= 0) {\n      if (!isEqual(item1, item2)) return false;\n    }\n\n    // Otherwise, do a simple comparison\n    else {\n      // If the two items are not the same type, return false\n      if (itemType !== Object.prototype.toString.call(item2)) return false;\n\n      // Else if it's a function, convert to a string and compare\n      // Otherwise, just compare\n      if (itemType === '[object Function]') {\n        if (item1.toString() !== item2.toString()) return false;\n      } else {\n        if (item1 !== item2) return false;\n      }\n    }\n  };\n\n  // Compare properties\n  if (type === '[object Array]') {\n    for (var i = 0; i < valueLen; i++) {\n      if (compare(value[i], other[i]) === false) return false;\n    }\n  } else {\n    for (var key in value) {\n      if (value.hasOwnProperty(key)) {\n        if (compare(value[key], other[key]) === false) return false;\n      }\n    }\n  }\n\n  // If nothing failed, return true\n  return true;\n};\n","import React, { useState, useEffect } from 'react';\nimport {\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Row,\n  Col,\n  Table,\n} from 'reactstrap';\n\nimport { minimize } from '../utils/Minimizer';\n\nconst ResultModal = ({ automaton, setIsSubmitted }) => {\n  const [modal, setModal] = useState(true);\n  const [automatonGraph, setAutomatonGraph] = useState('');\n  const [minimizedAutomaton, setMinimizedAutomaton] = useState(null);\n  const [minimizedAutomatonGraph, setMinimizedAutomatonGraph] = useState('');\n  const [equivalences, setEquivalences] = useState(null);\n\n  const drawGraph = (automaton) => {\n    var dotString = window.noam.fsm.printDotFormat(automaton);\n    var gvizXml = window.Viz(dotString, 'svg');\n    return gvizXml;\n  };\n\n  const generateAutomaton = (automaton) => {\n    setAutomatonGraph(drawGraph(automaton));\n    let minimizedAutomatonResult = minimize(automaton);\n    setMinimizedAutomaton(minimizedAutomatonResult.minimizedAutomaton);\n    setMinimizedAutomatonGraph(\n      drawGraph(minimizedAutomatonResult.minimizedAutomaton)\n    );\n    setEquivalences(minimizedAutomatonResult.equivalences);\n  };\n\n  useEffect(() => {\n    generateAutomaton(automaton);\n    // eslint-disable-next-line\n  }, []);\n\n  const toggle = () => {\n    setModal(!modal);\n    setIsSubmitted(false);\n  };\n\n  const formatEquivalence = (equivalence) => {\n    return JSON.stringify(equivalence)\n      .replace(/\\[/g, '{')\n      .replace(/\\]/g, '}')\n      .replace(/,/g, ', ');\n  };\n\n  return (\n    <Modal\n      isOpen={modal}\n      toggle={toggle}\n      size='lg'\n      style={{ width: '80vw', maxWidth: '100%', margin: 'auto' }}\n    >\n      <ModalHeader toggle={toggle}>Minimized Result</ModalHeader>\n      <ModalBody>\n        <div>\n          <Row>\n            <Col md='6'>\n              <h6>Original State Transition Table</h6>\n              <Table responsive bordered>\n                <thead>\n                  <tr>\n                    <th>States</th>\n                    {automaton.alphabet.map((symbol) => (\n                      <th key={symbol}>{symbol}</th>\n                    ))}\n                  </tr>\n                </thead>\n                <tbody>\n                  {automaton.states.map((state) => {\n                    return (\n                      <tr key={`transition-${state}}`}>\n                        <th scope='row'>{state}</th>\n                        {automaton.alphabet.map((symbol) => (\n                          <td key={`${state}-${symbol}`}>\n                            {automaton.transitions.map((transition) => {\n                              if (\n                                transition.symbol === symbol &&\n                                transition.fromState === state\n                              ) {\n                                return transition.toStates[0];\n                              }\n                            })}\n                          </td>\n                        ))}\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </Table>\n              <h6>Original Automaton Graph</h6>\n              <div\n                className='automaton-graphs'\n                dangerouslySetInnerHTML={{ __html: automatonGraph }}\n              ></div>\n            </Col>\n\n            <Col sm='6'>\n              <h6>Minimized State Transition Table</h6>\n              {minimizedAutomaton && (\n                <Table responsive bordered>\n                  <thead>\n                    <tr>\n                      <th>States</th>\n                      {minimizedAutomaton.alphabet.map((symbol) => (\n                        <th key={symbol}>{symbol}</th>\n                      ))}\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {minimizedAutomaton.states.map((state) => {\n                      return (\n                        <tr key={`transition-${state}}`}>\n                          <th scope='row'>{state}</th>\n                          {minimizedAutomaton.alphabet.map((symbol) => (\n                            <td key={`${state}-${symbol}`}>\n                              {minimizedAutomaton.transitions.map(\n                                (transition) => {\n                                  if (\n                                    transition.symbol === symbol &&\n                                    transition.fromState === state\n                                  ) {\n                                    return transition.toStates[0];\n                                  }\n                                }\n                              )}\n                            </td>\n                          ))}\n                        </tr>\n                      );\n                    })}\n                  </tbody>\n                </Table>\n              )}\n              <h6>Computed Equivalences</h6>\n              {equivalences &&\n                equivalences.map((equivalence, index) => (\n                  <p>\n                    {`${index}-Equivalence: ${formatEquivalence(equivalence)}`}\n                  </p>\n                ))}\n              <h6>Minimized Automaton Graph</h6>\n              <div\n                className='automaton-graphs'\n                dangerouslySetInnerHTML={{ __html: minimizedAutomatonGraph }}\n              ></div>\n            </Col>\n          </Row>\n        </div>\n      </ModalBody>\n      <ModalFooter>\n        <Button color='danger' onClick={toggle}>\n          Close\n        </Button>\n      </ModalFooter>\n    </Modal>\n  );\n};\n\nexport default ResultModal;\n","import React, { useState, useEffect } from 'react';\nimport Alert from '../includes/Alert';\nimport ResultModal from './ResultModal';\nimport MultiSelect from 'react-multi-select-component';\nimport {\n  Card,\n  Button,\n  CardHeader,\n  CardFooter,\n  CardBody,\n  CardTitle,\n  FormText,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Table,\n} from 'reactstrap';\n\nconst Home = () => {\n  const [automaton, setAutomaton] = useState({\n    states: [],\n    alphabet: [],\n    initialState: null,\n    acceptingStates: [],\n    transitions: [],\n  });\n\n  const [selectedFinalStates, setSelectedFinalStates] = useState([]);\n\n  useEffect(() => {\n    setAcceptingStates();\n    // eslint-disable-next-line\n  }, [selectedFinalStates]);\n\n  const [stateOptions, setStateOptions] = useState([]);\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [hasErrors, setHasErrors] = useState(false);\n\n  const setAcceptingStates = () => {\n    let acceptingStates = [];\n    selectedFinalStates.forEach((selectedState) => {\n      acceptingStates.push(selectedState.value);\n    });\n    setAutomaton({ ...automaton, acceptingStates });\n  };\n\n  const validate = () => {\n    const {\n      states,\n      alphabet,\n      initialState,\n      acceptingStates,\n      transitions,\n    } = automaton;\n    if (\n      states.length < 1 ||\n      alphabet.length < 1 ||\n      initialState == null ||\n      acceptingStates.length < 1 ||\n      transitions.length < 1\n    ) {\n      setHasErrors(true);\n      window.scrollTo(0, 0);\n      setTimeout(() => {\n        setHasErrors(false);\n      }, 6000);\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setAcceptingStates();\n    if (validate()) {\n      setHasErrors(false);\n      setIsSubmitted(true);\n    }\n  };\n\n  const handleChange = (e) => {\n    let value;\n    if (e.target.name === 'states') {\n      value = e.target.value.replace(/(^\\s*,)|(,\\s*$)/g, '');\n      if (value === '') {\n        setStateOptions([]);\n        return;\n      }\n      let states = value.split(',');\n      setAutomaton({\n        ...automaton,\n        states,\n        initialState: null,\n        acceptingStates: [],\n      });\n      let options = [];\n      states.forEach((state) => {\n        options.push({\n          label: state,\n          value: state,\n        });\n      });\n      setSelectedFinalStates([]);\n      setStateOptions(options);\n    } else if (e.target.name === 'initial-state') {\n      value = e.target.value;\n      setAutomaton({ ...automaton, initialState: value });\n    } else if (e.target.name === 'inputs') {\n      value = e.target.value.replace(/(^\\s*,)|(,\\s*$)/g, '');\n      let alphabet = value.split(',');\n      setAutomaton({ ...automaton, alphabet });\n    } else {\n      let splitName = e.target.name.split('-');\n      let fromState = splitName[0];\n      let toStates = [e.target.value];\n      let symbol = splitName[splitName.length - 1];\n      let transitions = automaton.transitions;\n      let alreadyExists = false;\n      transitions.forEach((transition) => {\n        if (\n          transition.symbol === symbol &&\n          transition.fromState === fromState\n        ) {\n          transition.toStates = toStates;\n          alreadyExists = true;\n          return;\n        }\n      });\n      if (alreadyExists === false) {\n        transitions.push({ fromState, toStates, symbol });\n      }\n      setAutomaton({ ...automaton, transitions });\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <Card className='shadow-sm'>\n        <CardHeader>Input Automaton</CardHeader>\n        <CardBody>\n          <CardTitle>\n            Use the form below to input data for your automaton\n          </CardTitle>\n          {hasErrors && (\n            <Alert\n              type='danger'\n              msg='All fields below are required. Please make sure that you have filled all the fields before submitting the form again.'\n            />\n          )}\n          <Form onSubmit={handleSubmit}>\n            <FormGroup>\n              <Label for='states'>Enter states separated by commas:</Label>\n              <Input\n                onChange={handleChange}\n                type='text'\n                name='states'\n                id='states'\n                required\n                placeholder='e.g. q1,q2,q3,q4 or s1,s2,s3,s4 etc.'\n              />\n              <FormText>\n                All Spaces and trailing commas will be ignored\n              </FormText>\n            </FormGroup>\n            <FormGroup>\n              <Label for='inputs'>\n                Enter alphabet inputs separated by commas:\n              </Label>\n              <Input\n                onChange={handleChange}\n                type='text'\n                name='inputs'\n                required\n                id='inputs'\n                placeholder='e.g. a,b or 0,1'\n              />\n              <FormText>\n                All Spaces and trailing commas will be ignored\n              </FormText>\n            </FormGroup>\n            {stateOptions.length > 0 && (\n              <FormGroup>\n                <Label for='initial-state'>Select initial state:</Label>\n                <Input\n                  required\n                  type='select'\n                  name='initial-state'\n                  id='initial-state'\n                  onChange={handleChange}\n                  value={automaton.initialState ? automaton.initialState : ''}\n                >\n                  <option value=''>Select...</option>\n                  {stateOptions.map((option) => (\n                    <option key={option.value} value={option.value}>\n                      {option.value}\n                    </option>\n                  ))}\n                </Input>\n              </FormGroup>\n            )}\n            {stateOptions.length > 0 && (\n              <FormGroup>\n                <Label for='final-states'>Select final states:</Label>\n                <MultiSelect\n                  required\n                  id='final-states'\n                  options={stateOptions}\n                  value={selectedFinalStates}\n                  onChange={setSelectedFinalStates}\n                  labelledBy={'Select'}\n                />\n              </FormGroup>\n            )}\n            {automaton.states.length > 0 && automaton.alphabet.length > 0 && (\n              <FormGroup>\n                <Label>Transitions</Label>\n                <Table responsive bordered>\n                  <thead>\n                    <tr>\n                      <th>States</th>\n                      {automaton.alphabet.map((symbol) => (\n                        <th key={symbol}>{symbol}</th>\n                      ))}\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {automaton.states.map((state) => {\n                      return (\n                        <tr key={`transition-${state}}`}>\n                          <th scope='row'>{state}</th>\n                          {automaton.alphabet.map((alphabet) => (\n                            <td key={`${state}-${alphabet}`}>\n                              <Input\n                                required\n                                bsSize='sm'\n                                type='select'\n                                onChange={handleChange}\n                                name={`${state}-${alphabet}`}\n                              >\n                                <option value=''>State</option>\n                                {stateOptions.map((option) => (\n                                  <option\n                                    key={option.value}\n                                    value={option.value}\n                                  >\n                                    {option.value}\n                                  </option>\n                                ))}\n                              </Input>\n                            </td>\n                          ))}\n                        </tr>\n                      );\n                    })}\n                  </tbody>\n                </Table>\n              </FormGroup>\n            )}\n            <Button type='submit' style={{ backgroundColor: '#4052B6' }}>\n              Minimize DFA\n            </Button>\n          </Form>\n        </CardBody>\n        <CardFooter className='d-flex flex-column flex-md-row flex-lg-row align-items-center justify-content-between'>\n          <span>\n            Developed with Love 💖\n          </span>\n        </CardFooter>\n      </Card>\n      {isSubmitted && (\n        <ResultModal automaton={automaton} setIsSubmitted={setIsSubmitted} />\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport { Container } from 'reactstrap';\nimport Header from './includes/Header';\nimport Home from './pages/Home';\n\nfunction App() {\n  return (\n    <>\n      <Header />\n      <Container style={{ position: 'relative', bottom: '150px' }}>\n        <Home />\n      </Container>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}